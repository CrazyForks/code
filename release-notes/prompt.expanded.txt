You are Code running headless in CI to prepare a new release.

Inputs
- Version: v0.2.81
- Date (UTC): 2025-09-07
- Previous tag: v0.2.80
- Commit range: v0.2.80..HEAD
- Working directory: repo root (CHANGELOG.md lives at top-level)

Primary Tasks
1) Update CHANGELOG.md with a new entry for this version using the EXACT house style below.
2) Generate GitHub release notes at release-notes/RELEASE_NOTES.md (concise, user‑facing), derived from the same changes.

CHANGELOG.md House Style (strict)
- File header stays as-is ("Changelog"). Do not rewrite older sections.
- Insert the new section at the top (above previous versions), with this header format exactly:
  ## [0.2.81] - 2025-09-07
- Include 2–5 bullets (no more, no fewer), each a single line, focusing on user-visible features, fixes, UX, performance, or stability.
- Keep bullets concise and scannable; avoid long prose. Use present tense.
- When helpful, start bullets with a short scope label like "TUI:", "CLI:", or "Core:".
- At the end of each bullet, include abbreviated commit SHA(s) in parentheses, using 7–8 hex chars, comma‑separated when multiple, like: (abc1234, def5678).
- Map changes from the git commit log in v0.2.80..HEAD; ignore pure chores/merges unless user‑visible.
- Do NOT add links, tables, code blocks, or subheadings. Do NOT include PR author attributions in the changelog.
- Do NOT add any extra headers inside the changelog entry; only bullets under the version header.
- Idempotent: if a section for 0.2.81 already exists, replace only that section’s body with the newly generated bullets and keep the header intact.

Release Notes (release-notes/RELEASE_NOTES.md)
- Write exactly these sections in order; include the optional Thanks section only when applicable:
  1) Title: ## @just-every/code v0.2.81
  2) One brief intro sentence (1–2 lines max).
  3) Section header: ### Changes
     - The same 2–5 bullets as in the changelog (you may omit SHAs).
  4) Section header: ### Install
     Code block with exactly:
     npm install -g @just-every/code@latest
     code
  5) Optional section header: ### Thanks
     - Include ONE line like: "Thanks to @alice and @bob for contributions!"
     - Only include if at least one merged PR in v0.2.80..HEAD is authored by an external contributor.
     - External contributors are any GitHub users other than: @zemaj, @andrej-griniuk, and NOT upstream contributors.
     - Treat a username as upstream if it matches the regex /-oai$/i, or clearly belongs to the upstream org (e.g., OpenAI maintainers). Exclude such users from Thanks.
     - Derive usernames from merge commits, Co-authored-by trailers, or PR references in commit messages. Deduplicate and prefer "@username" form.
- Keep notes concise; no walls of text. Do not add any other sections beyond the optional Thanks.
- Optional final line (only if a previous tag exists):
  Compare: https://github.com/just-every/code/compare/v0.2.80...v0.2.81

Rules
- Use the provided git log as source of truth; summarize responsibly.
- Explore codebase directly if commit messages are unclear or need additional context.
- Keep formatting minimal (headers + list bullets). No emojis ever! Basic markdown only.
- Never reorder older versions. Only touch the section for v0.2.81.
- After writing files, stage and commit with message: docs(changelog): update for v0.2.81 [skip ci]

Context (git log excerpt follows):
# Commit log (v0.2.80..HEAD)
* 4045d370 chore(release): 0.2.81 [skip ci] (GitHub Action)
* ee32f3b8 ci(upstream-merge): write MERGE_PLAN/REPORT to .github/auto; ignore .github/auto in git; upload entire .github/auto directory as artifacts; remove any committed plan/report in cleanup (James Peter)
* d41da1d1 ci(upstream-merge): soften TUI invariants guard to warning-only (James Peter)
* 53558af0 ci(upstream-merge): run TUI invariants guard only when TUI changed; search repo-wide for tokens (James Peter)
* e410f2ab ci(upstream-merge): handle no merge-base case in context prep (skip reintroduced detection when unrelated histories) (James Peter)
* dd0dc88f ci(upstream-merge): avoid fetching tags to prevent 'would clobber existing tag' errors; add --no-tags to upstream/origin fetches (James Peter)
* 23f1084e ci(upstream-merge): use cached static binaries for ripgrep/jq; add PATH; add debug trace for context prep (James Peter)
* 8ee54b85 ci(upstream-merge): fetch with commit graph (blobless) for full history; forbid --allow-unrelated-histories; handle empty COMMITS.json (James Peter)
* c78a87be ci(upstream-merge): compute REINTRODUCED_PATHS via merge-base; remove those in cleanup; minimize <policy> output; drop stale THEIRS_GLOBS (James Peter)
* e991e468 ci(upstream-merge): cache Cargo registry under RUNNER_TEMP; guard apt installs for ripgrep/jq (James Peter)
* b6f6d812 ci(upstream-merge): fix unbound DEFAULT_BRANCH in cleanup step; make artifacts upload tolerant; remove duplicate PR JS (James Peter)
* 87c405f4 ci(upstream-merge): precompute commit range + deleted paths + histogram; expand agent context; plan-first; TUI invariants guard; step summary + artifacts; set safe.directory (James Peter)
* c402f328 docs(changelog): update for v0.2.80 [skip ci] (GitHub Action)
