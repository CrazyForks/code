name: Preview Build

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
  workflow_dispatch: {}

concurrency:
  group: preview-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  build:
    # Skip preview builds for the automated upstream-merge PRs.
    # These PRs are large, frequent, and not meant for end-user preview binaries.
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.draft == false &&
        github.event.pull_request.head.ref != 'upstream-merge'
      )
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux MUSL (static-ish) builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: code-x86_64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: code-aarch64-unknown-linux-musl
          # macOS builds (both architectures)
          - os: macos-14
            target: x86_64-apple-darwin
            artifact: code-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: code-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: code-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        shell: bash
        run: |
          rustup set profile minimal
          rustup toolchain install 1.89.0 --profile minimal --target ${{ matrix.target }}
          rustup default 1.89.0

      - name: Rust cache (target + registries)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-preview
          shared-key: preview-${{ matrix.target }}-rust-1.89
          workspaces: |
            codex-rs -> target
          cache-targets: true
          cache-workspace-crates: true
          cache-on-failure: true

      - name: Setup sccache (GHA backend)
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: v0.10.0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable sccache
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
          echo "SCCACHE_IDLE_TIMEOUT=1800" >> "$GITHUB_ENV"
          echo "SCCACHE_CACHE_SIZE=10G" >> "$GITHUB_ENV"

      # Platform tuning (lightweight)
      - name: Linux musl tuning
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, 'musl')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config zstd
          echo 'CC=musl-gcc' >> "$GITHUB_ENV"
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl) echo 'CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc' >> "$GITHUB_ENV" ;;
            aarch64-unknown-linux-musl) echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc' >> "$GITHUB_ENV" ;;
          esac
          echo 'PKG_CONFIG_ALLOW_CROSS=1' >> "$GITHUB_ENV"
          echo 'OPENSSL_STATIC=1'         >> "$GITHUB_ENV"
          echo 'RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort' >> "$GITHUB_ENV"

      - name: macOS tuning
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          echo 'CC=sccache clang'    >> "$GITHUB_ENV"
          echo 'CXX=sccache clang++' >> "$GITHUB_ENV"
          echo 'RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort' >> "$GITHUB_ENV"

      - name: Windows tuning
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          "LIBGIT2_SYS_USE_SCHANNEL=1" >> $env:GITHUB_ENV
          "CURL_SSL_BACKEND=schannel"  >> $env:GITHUB_ENV
          if (Get-Command lld-link -ErrorAction SilentlyContinue) {
            "RUSTFLAGS=-Awarnings -Clinker=lld-link -C debuginfo=0 -C strip=symbols -C panic=abort -C link-arg=/OPT:REF -C link-arg=/OPT:ICF -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          } else {
            "RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort -C link-arg=/OPT:REF -C link-arg=/OPT:ICF -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          }

      - name: Prefetch deps
        working-directory: codex-rs
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
        run: cargo fetch --locked

      - name: Build code (release)
        shell: bash
        run: |
          cd codex-rs
          cargo build --release --locked --target ${{ matrix.target }} --bin code

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp codex-rs/target/${{ matrix.target }}/release/code.exe artifacts/${{ matrix.artifact }}
          else
            cp codex-rs/target/${{ matrix.target }}/release/code artifacts/${{ matrix.artifact }}
          fi

      - name: Compress artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Get-ChildItem artifacts -File | ForEach-Object {
            $src = $_.FullName
            $dst = "$src.zip"
            Compress-Archive -Path $src -DestinationPath $dst -Force
            Remove-Item $src -Force
          }

      - name: Compress artifacts (*nix dual-format)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          shopt -s nullglob
          for f in artifacts/*; do
            [ -f "$f" ] || continue
            base=$(basename "$f")
            # .zst (size-optimized)
            if command -v zstd >/dev/null 2>&1; then
              zstd -T0 -19 --force -o "artifacts/${base}.zst" "$f" || true
            fi
            # .tar.gz fallback
            tar -C artifacts -czf "artifacts/${base}.tar.gz" "$base"
            rm -f "$f"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: preview-${{ matrix.target }}
          path: artifacts/
          compression-level: 0

  release:
    name: Publish prerelease (all targets)
    needs: [build]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'upstream-merge'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create or update prerelease with assets
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: preview-pr-${{ github.event.pull_request.number }}
          TITLE: Preview for PR #${{ github.event.pull_request.number }}
        shell: bash
        run: |
          set -euo pipefail
          # Show files for debugging
          echo "Artifacts directory:"; ls -R artifacts || true
          # Ensure release exists (create if missing)
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" \
              --title "$TITLE" \
              --notes "Automated prerelease with preview binaries for PR #${{ github.event.pull_request.number }} (run ${{ github.run_id }})." \
              --prerelease \
              --latest=false \
              --target "$GITHUB_SHA"
          fi
          # Upload/replace all artifacts
          shopt -s globstar nullglob
          files=(artifacts/**)
          if [ ${#files[@]} -gt 0 ]; then
            gh release upload "$TAG" "${files[@]}" --clobber
          else
            echo "No artifacts found to upload." >&2
          fi

  comment:
    name: Post Artifact Links
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Upsert PR comment with artifact info
        if: github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'upstream-merge'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.pull_request.number;
            const runId = context.runId;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            const tag = `preview-pr-${issue_number}`;
            const releaseBase = `https://github.com/${owner}/${repo}/releases/download/${tag}`;

            const marker = '<!-- preview-build:artifacts -->';

            const body = [
              marker,
              '### Preview Build',
              '',
              'Option A (no auth):',
              'In your terminal use:',
              '```bash',
              `code preview pr:${issue_number}`,
              '```',
              'This downloads from the prerelease for this PR (no GitHub token required).',
              '',
              'Direct downloads:',
              `- Linux x86_64 (.zst): ${releaseBase}/code-x86_64-unknown-linux-musl.zst`,
              `- Linux x86_64 (.tar.gz): ${releaseBase}/code-x86_64-unknown-linux-musl.tar.gz`,
              `- Linux aarch64 (.zst): ${releaseBase}/code-aarch64-unknown-linux-musl.zst`,
              `- Linux aarch64 (.tar.gz): ${releaseBase}/code-aarch64-unknown-linux-musl.tar.gz`,
              `- macOS x86_64 (.zst): ${releaseBase}/code-x86_64-apple-darwin.zst`,
              `- macOS x86_64 (.tar.gz): ${releaseBase}/code-x86_64-apple-darwin.tar.gz`,
              `- macOS arm64 (.zst): ${releaseBase}/code-aarch64-apple-darwin.zst`,
              `- macOS arm64 (.tar.gz): ${releaseBase}/code-aarch64-apple-darwin.tar.gz`,
              `- Windows x86_64 (.zip): ${releaseBase}/code-x86_64-pc-windows-msvc.exe.zip`,
              '',
              'Option B:',
              'You can also run by Actions run id (requires auth):',
              '```bash',
              `code preview ${runId}`,
              '```',
              'This will run the version of Code we\'ve created for this issue.',
              '',
              'After you run it, please comment here and let me know if it does what you need.',
              marker
            ].join('\n');

            // Find existing marker comment from this bot
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user?.type?.toLowerCase().includes('bot') && c.body?.includes(marker));
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
