name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/test.yml'
      - 'examples/**'
      - '**/*.test.ts'
      - 'test/**'
      - '*.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Determine next version
      id: version
      working-directory: codex-cli
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version in package.json: $CURRENT_VERSION"
        
        # Check latest published version
        PUBLISHED_VERSION=$(npm view @just-every/code version 2>/dev/null || echo "0.0.0")
        echo "Latest published version: $PUBLISHED_VERSION"
        
        # Determine the version to use for this build
        if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ] || [ "$CURRENT_VERSION" \< "$PUBLISHED_VERSION" ]; then
          # Need to bump from published version
          echo "Will bump from published version $PUBLISHED_VERSION"
          # Calculate next patch version
          IFS='.' read -ra VERSION_PARTS <<< "$PUBLISHED_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        else
          echo "Using current version $CURRENT_VERSION which is ahead of published $PUBLISHED_VERSION"
          NEW_VERSION=$CURRENT_VERSION
        fi
        
        echo "Version for this build: $NEW_VERSION"
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: code-x86_64-unknown-linux-musl
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact: code-x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: code-aarch64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: code-aarch64-unknown-linux-gnu
          # macOS builds
          - os: macos-14  # ARM Mac for both targets
            target: x86_64-apple-darwin
            artifact: code-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: code-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: code-x86_64-pc-windows-msvc.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        targets: ${{ matrix.target }}
    
    # Smart caching for Rust builds - handles everything automatically
    - name: Setup Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        # Ensure cache is unique per target
        key: ${{ matrix.target }}
        # Cache on failure to speed up debugging
        cache-on-failure: true
        # Working directory for the cache
        workspaces: "codex-rs -> target"

    # Compiler cache across all OSes; integrates with GitHub Actions cache
    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.6
      with:
        # Keep separate caches per compilation target
        cache-key: ${{ matrix.target }}

    - name: Install mold (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y mold || true
        
    - name: Install musl tools (Linux)
      if: contains(matrix.target, 'musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools pkg-config
        
    - name: Set version in Cargo.toml (workspace only)
      run: |
        VERSION="${{ needs.determine-version.outputs.version }}"
        echo "📝 Setting version to ${VERSION} in Cargo.toml files"
        
        # Update the workspace version in root Cargo.toml
        cd codex-rs
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows: Use PowerShell with proper variable substitution
          powershell -Command "
            \$version = '${VERSION}'
            \$content = Get-Content Cargo.toml
            \$content = \$content -replace '^version = \".*\"', \"version = \`\"\$version\`\"\"
            Set-Content -Path Cargo.toml -Value \$content
          "
        else
          # Unix-like systems
          sed -i.bak "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml
        fi
        
        # Verify the update
        echo "Updated Cargo.toml:"
        grep "^version = " Cargo.toml || true
        
        # Update Cargo.lock to reflect only workspace version bumps, without
        # floating third-party dependency versions or git revisions.
        echo "🔒 Updating Cargo.lock for workspace members only"
        # Extract member directories from [workspace] table and update each workspace crate
        awk '/^\s*\[workspace\]/{ws=1} ws && /^members\s*=\s*\[/{f=1; next} f && /\]/{f=0} f{ gsub(/[",]/,""); if($1!="") print $1 }' Cargo.toml \
          | while IFS= read -r dir; do
              if [[ -f "$dir/Cargo.toml" ]]; then
                NAME=$(sed -n 's/^name\s*=\s*"\(.*\)"/\1/p' "$dir/Cargo.toml" | head -n1)
                if [[ -n "$NAME" ]]; then
                  echo "  • cargo update -p $NAME"
                  cargo update -p "$NAME"
                fi
              fi
            done
        
        # Now normalize the Cargo.lock workspace versions to ensure consistency
        echo "🔧 Normalizing Cargo.lock workspace versions"
        # Build list of workspace crate names
        awk '/^\s*\[workspace\]/{ws=1} ws && /^members\s*=\s*\[/{f=1; next} f && /\]/{f=0} f{ gsub(/[",]/,""); if($1!="") print $1 }' Cargo.toml \
          | while IFS= read -r dir; do
              if [[ -f "$dir/Cargo.toml" ]]; then
                sed -n 's/^name\s*=\s*"\(.*\)"/\1/p' "$dir/Cargo.toml"
              fi
            done \
          > .workspace-crate-names

        if [[ -s .workspace-crate-names ]]; then
          awk -v ver="$VERSION" 'FNR==NR { if ($0!="") want[$0]=1; next }
            /^\[\[package\]\]$/ { pkg=""; print; next }
            /^name = \"/ && pkg=="" { if (match($0, /^name = \"([^\"]+)\"/, m)) pkg=m[1]; print; next }
            /^version = \"/ {
              if (pkg != "" && (pkg in want)) { print "version = \"" ver "\"" } else { print }
              next
            }
            { print }
          ' .workspace-crate-names Cargo.lock > Cargo.lock.tmp && mv Cargo.lock.tmp Cargo.lock
        fi
        rm -f .workspace-crate-names
      shell: bash

    - name: Build binaries
      shell: bash
      env:
        # Use mold linker on Linux when available for faster linking
        RUSTFLAGS: ${{ contains(matrix.os, 'ubuntu') && '-C link-arg=-fuse-ld=mold' || '' }}
        # Skip macOS codesigning in CI to allow cross-arch builds
        SKIP_SIGNING: '1'
        # sccache performs best with incremental disabled for release builds
        CARGO_INCREMENTAL: "0"
        # Increase cache capacity a bit to improve hit rate across targets
        SCCACHE_CACHE_SIZE: "10G"
      run: |
        cd codex-rs
        # mozilla-actions/sccache-action sets RUSTC_WRAPPER and enables GHA cache
        command -v sccache >/dev/null 2>&1 && echo "Using sccache for compilation caching" || echo "sccache not available; proceeding without it"
        # Use all available cores
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows: Use NUMBER_OF_PROCESSORS env var
          export CARGO_BUILD_JOBS=$((${NUMBER_OF_PROCESSORS:-2} * 2))
        else
          # Unix-like: Prefer nproc if available, otherwise getconf/sysctl
          CORES=$((
            $( (command -v nproc >/dev/null 2>&1 && nproc) \
               || (getconf _NPROCESSORS_ONLN 2>/dev/null) \
               || (sysctl -n hw.ncpu 2>/dev/null) \
               || echo 2 )
          ))
          export CARGO_BUILD_JOBS=$((CORES * 2))
        fi
        echo "Building with $CARGO_BUILD_JOBS parallel jobs"
        # Use --locked to ensure reproducible builds
        cargo build --release --locked --target ${{ matrix.target }} --bin code --bin code-tui --bin code-exec

        # Show sccache stats if available (non-fatal)
        command -v sccache >/dev/null 2>&1 && sccache --show-stats || true
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp codex-rs/target/${{ matrix.target }}/release/code.exe artifacts/${{ matrix.artifact }}
          cp codex-rs/target/${{ matrix.target }}/release/code-tui.exe artifacts/code-tui-${{ matrix.target }}.exe
          cp codex-rs/target/${{ matrix.target }}/release/code-exec.exe artifacts/code-exec-${{ matrix.target }}.exe
        else
          cp codex-rs/target/${{ matrix.target }}/release/code artifacts/${{ matrix.artifact }}
          cp codex-rs/target/${{ matrix.target }}/release/code-tui artifacts/code-tui-${{ matrix.target }}
          cp codex-rs/target/${{ matrix.target }}/release/code-exec artifacts/code-exec-${{ matrix.target }}
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.target }}
        path: artifacts/

  release:
    name: Publish to npm
    needs: [determine-version, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Skip if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release assets
      run: |
        # Create a directory for all release assets
        mkdir -p release-assets
        
        # Copy all binaries to release-assets for GitHub Release
        for dir in artifacts/binaries-*; do
          cp $dir/* release-assets/
        done
        
        # Make binaries executable
        chmod +x release-assets/*
        
        # List assets for verification
        ls -la release-assets/

    - name: Sync README for npm
      run: |
        # Ensure npm package uses the repository root README
        cp README.md codex-cli/README.md
        
    - name: Update package.json version
      id: version
      working-directory: codex-cli
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Use the pre-determined version
        NEW_VERSION="${{ needs.determine-version.outputs.version }}"
        echo "Setting version to: $NEW_VERSION"
        
        # Update package.json with the new version
        npm version $NEW_VERSION --no-git-tag-version --allow-same-version
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        # Commit changes
        git add package.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore(release): ${NEW_VERSION} [skip ci]"
          echo "skip_push=false" >> $GITHUB_OUTPUT
        fi

        # Ensure the tag exists at HEAD, regardless of whether package.json changed
        if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
          git tag "v${NEW_VERSION}"
          echo "Created tag v${NEW_VERSION}"
        else
          echo "Tag v${NEW_VERSION} already exists"
        fi
        echo "tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
      
    - name: Check if we should publish
      id: should_publish
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "NPM_TOKEN not set, skipping publish"
          echo "publish=false" >> $GITHUB_OUTPUT
        else
          echo "NPM_TOKEN is set, will publish"
          echo "publish=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to npm
      working-directory: codex-cli
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      if: steps.should_publish.outputs.publish == 'true'
    
    - name: Push tag
      run: |
        # Push the tag even if no commit was made in this job
        git push origin "v${{ steps.version.outputs.version }}" || true
      
        
    - name: Push changes
      run: |
        git push origin main
        git push origin --tags
      if: steps.version.outputs.skip_push != 'true'
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## @just-every/code v${{ steps.version.outputs.version }}
          
          Fork of OpenAI Codex with additional features:
          - Enhanced image handling (drag-and-drop, paste, file path detection)
          - /reasoning slash command for dynamic reasoning effort
          
          ### Installation
          ```bash
          npm install -g @just-every/code
          ```
          
          ### Usage
          ```bash
          code
          ```
        files: |
          release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
