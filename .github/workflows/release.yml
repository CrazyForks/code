name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/test.yml'
      - 'examples/**'
      - '**/*.test.ts'
      - 'test/**'
      - '*.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine next version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"

          # Check latest published version
          PUBLISHED_VERSION=$(npm view @just-every/code version 2>/dev/null || echo "0.0.0")
          echo "Latest published version: $PUBLISHED_VERSION"

          # Determine the version to use for this build
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ] || [ "$CURRENT_VERSION" \< "$PUBLISHED_VERSION" ]; then
            echo "Will bump from published version $PUBLISHED_VERSION"
            IFS='.' read -ra VERSION_PARTS <<< "$PUBLISHED_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          else
            echo "Using current version $CURRENT_VERSION which is ahead of published $PUBLISHED_VERSION"
            NEW_VERSION=$CURRENT_VERSION
          fi

          echo "Version for this build: $NEW_VERSION"
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: code-x86_64-unknown-linux-musl
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact: code-x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: code-aarch64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: code-aarch64-unknown-linux-gnu
          # macOS builds
          - os: macos-14
            target: x86_64-apple-darwin
            artifact: code-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: code-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: code-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.89.0
        with:
          targets: ${{ matrix.target }}

      # ✅ Resilient workspace/registry caching (not tied to lockfile churn)
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: codex-${{ matrix.target }}-rust-1.89
          prefix-key: v2-rust
          cache-on-failure: true
          cache-all-crates: true
          workspaces: "codex-rs -> target"
          cache-directories: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git

      # Configure stable cache keys for sccache BEFORE initializing it
      - name: Configure sccache cache keys
        shell: bash
        run: |
          # Use stable cache keys that persist across runs
          echo "SCCACHE_GHA_CACHE_TO=sccache-${{ matrix.target }}-rust-1.89-v3" >> "$GITHUB_ENV"
          echo "SCCACHE_GHA_CACHE_FROM=sccache-${{ matrix.target }}-rust-1.89-v3,sccache-${{ matrix.target }}-rust-1.89-v2" >> "$GITHUB_ENV"

      # ✅ Current sccache action (GHAC support). Do not hand-edit ACTIONS_* envs.
      - name: Setup sccache (GHA backend)
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: v0.10.0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Ensure GHAC is enabled & rustc routed through sccache; also set a per-OS default local dir
      - name: Set sccache env + dir
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "SCCACHE_IDLE_TIMEOUT=1800" >> "$GITHUB_ENV" # keep server alive during job
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
          case "${{ runner.os }}" in
            macOS)
              echo "SCCACHE_DIR=$HOME/Library/Caches/Mozilla.sccache" >> "$GITHUB_ENV"
              ;;
            Linux)
              echo "SCCACHE_DIR=$HOME/.cache/sccache" >> "$GITHUB_ENV"
              ;;
            Windows)
              # Use the default local cache dir on Windows (works for fallback + actions/cache)
              echo "SCCACHE_DIR=$LOCALAPPDATA\\Mozilla\\sccache" >> "$GITHUB_ENV"
              ;;
          esac

      # Ensure GH Actions cache credentials are inherited by child processes (sccache server)
      - name: Export GH cache env for children
        shell: bash
        run: |
          echo "ACTIONS_CACHE_URL=${ACTIONS_CACHE_URL}" >> "$GITHUB_ENV"
          echo "ACTIONS_RUNTIME_TOKEN=${ACTIONS_RUNTIME_TOKEN}" >> "$GITHUB_ENV"

      # ✅ Persist the local sccache directory as a shared, stable fallback across runs
      - name: Cache sccache directory (fallback)
        uses: actions/cache@v4
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ runner.os }}-${{ matrix.target }}-rust-1.89
          restore-keys: |
            sccache-${{ runner.os }}-${{ matrix.target }}-
            sccache-${{ runner.os }}-

      - name: Install mold (Linux)
        if: contains(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y mold || true

      - name: Install musl tools (Linux musl)
        if: contains(matrix.target, 'musl')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config

      - name: Set version in Cargo.toml and Cargo.lock
        shell: bash
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          echo "📝 Setting version to ${VERSION}"

          cd codex-rs

          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version in Cargo.toml: $CURRENT_VERSION"

          # Update version in root Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

          # Update version in workspace members' Cargo.toml files
          WORKSPACE_MEMBERS=$(awk '/^\s*\[workspace\]/{ws=1} ws && /^members\s*=\s*\[/{f=1; next} f && /\]/{f=0} f{ gsub(/[",]/,""); if($1!="") print $1 }' Cargo.toml)
          for dir in $WORKSPACE_MEMBERS; do
            if [ -f "$dir/Cargo.toml" ]; then
              sed -i.bak "s/^version = \".*\"/version = \"${VERSION}\"/" "$dir/Cargo.toml"
            fi
          done

          # Clean up backup files
          find . -name "*.bak" -delete

          echo "🔒 Updating Cargo.lock with cargo (preserving dependency versions)"
          cargo update --workspace --offline || cargo update --workspace
          echo "✅ Cargo.lock updated properly"

      - name: Build binaries
        shell: bash
        env:
          RUSTFLAGS: ${{ contains(matrix.os, 'ubuntu') && '-Awarnings -C link-arg=-fuse-ld=mold' || '-Awarnings' }}
          SKIP_SIGNING: '1'
          CARGO_INCREMENTAL: "0"
          SCCACHE_CACHE_SIZE: "10G"
          # Route rustc through sccache (server fallback may unset this)
          RUSTC_WRAPPER: sccache
          # Prefer successful build over failing on cache IO issues
          SCCACHE_IGNORE_SERVER_IO_ERROR: '1'
          RUST_BACKTRACE: "1"
          SCCACHE_LOG: "info"
          # Keep GHAC enabled initially; we may disable it below if startup fails
          SCCACHE_GHA_ENABLED: 'true'
        run: |
          cd codex-rs

          echo "Restarting sccache server to avoid race conditions"
          sccache --stop-server || true
          echo "Starting sccache server (GHAC preferred)"
          if ! sccache --start-server; then
            echo "sccache GHAC failed to start; switching to local disk cache"
            unset SCCACHE_GHA_ENABLED
            # Ensure local cache dir exists
            mkdir -p "${SCCACHE_DIR}"
            if ! sccache --start-server; then
              echo "sccache local cache also failed; disabling sccache"
              unset RUSTC_WRAPPER
            fi
          fi

          # Show initial stats (useful to confirm GHAC vs Local)
          echo "=== Initial sccache stats ==="
          if command -v sccache >/dev/null 2>&1; then
            sccache --show-stats || true
            echo "Cache keys: TO=${SCCACHE_GHA_CACHE_TO:-not set}, FROM=${SCCACHE_GHA_CACHE_FROM:-not set}"
          fi

          # Calculate parallel jobs
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export CARGO_BUILD_JOBS=$((${NUMBER_OF_PROCESSORS:-2} * 2))
          else
            CORES=$((
              $( (command -v nproc >/dev/null 2>&1 && nproc) \
                 || (getconf _NPROCESSORS_ONLN 2>/dev/null) \
                 || (sysctl -n hw.ncpu 2>/dev/null) \
                 || echo 2 )
            ))
            export CARGO_BUILD_JOBS=$((CORES * 2))
          fi
          echo "Building with $CARGO_BUILD_JOBS parallel jobs"

          # Reproducible CI builds
          cargo build --release --locked --target ${{ matrix.target }} --bin code --bin code-tui --bin code-exec

          # Print final stats
          echo "=== Final sccache stats ==="
          if command -v sccache >/dev/null 2>&1; then
            sccache --show-stats || true
            # Also show detailed stats in JSON for debugging
            if [[ "${SCCACHE_LOG}" == "debug" ]] || [[ "${SCCACHE_LOG}" == "info" ]]; then
              echo "=== Detailed stats (JSON) ==="
              sccache --show-stats --stats-format json || true
            fi
          fi

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp codex-rs/target/${{ matrix.target }}/release/code.exe artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui.exe artifacts/code-tui-${{ matrix.target }}.exe
            cp codex-rs/target/${{ matrix.target }}/release/code-exec.exe artifacts/code-exec-${{ matrix.target }}.exe
          else
            cp codex-rs/target/${{ matrix.target }}/release/code artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui artifacts/code-tui-${{ matrix.target }}
            cp codex-rs/target/${{ matrix.target }}/release/code-exec artifacts/code-exec-${{ matrix.target }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/

  release:
    name: Publish to npm
    needs: [determine-version, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          for dir in artifacts/binaries-*; do
            cp "$dir"/* release-assets/
          done
          chmod +x release-assets/* || true
          ls -la release-assets/

      - name: Sync README for npm
        shell: bash
        run: |
          cp README.md codex-cli/README.md

      - name: Update package.json version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          NEW_VERSION="${{ needs.determine-version.outputs.version }}"
          echo "Setting version to: $NEW_VERSION"

          npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version

          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

          git add package.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "skip_push=true" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore(release): ${NEW_VERSION} [skip ci]"
            echo "skip_push=false" >> "$GITHUB_OUTPUT"
          fi

          if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            git tag "v${NEW_VERSION}"
            echo "Created tag v${NEW_VERSION}"
          else
            echo "Tag v${NEW_VERSION} already exists"
          fi
          echo "tag=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Check if we should publish
        id: should_publish
        shell: bash
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "NPM_TOKEN not set, skipping publish"
            echo "publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "NPM_TOKEN is set, will publish"
            echo "publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        if: steps.should_publish.outputs.publish == 'true'
        working-directory: codex-cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Push tag
        shell: bash
        run: |
          git push origin "v${{ steps.version.outputs.version }}" || true

      - name: Push changes
        if: steps.version.outputs.skip_push != 'true'
        shell: bash
        run: |
          git push origin main
          git push origin --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## @just-every/code v${{ steps.version.outputs.version }}

            Fork of OpenAI Codex with additional features:
            - Enhanced image handling (drag-and-drop, paste, file path detection)
            - /reasoning slash command for dynamic reasoning effort

            ### Installation
            ```bash
            npm install -g @just-every/code
            ```

            ### Usage
            ```bash
            code
            ```
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
