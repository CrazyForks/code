name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/test.yml'
      - 'examples/**'
      - '**/*.test.ts'
      - 'test/**'
      - '*.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine next version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          PUBLISHED_VERSION=$(npm view @just-every/code version 2>/dev/null || echo "0.0.0")
          echo "Latest published version: $PUBLISHED_VERSION"
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ] || [ "$CURRENT_VERSION" \< "$PUBLISHED_VERSION" ]; then
            IFS='.' read -ra V <<< "$PUBLISHED_VERSION"
            NEW_VERSION="${V[0]}.${V[1]}.$((${V[2]} + 1))"
          else
            NEW_VERSION=$CURRENT_VERSION
          fi
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: code-x86_64-unknown-linux-musl
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact: code-x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: code-aarch64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: code-aarch64-unknown-linux-gnu
          # macOS builds
          - os: macos-14
            target: x86_64-apple-darwin
            artifact: code-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: code-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: code-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain with MINIMAL profile and ignore repo components.
      - name: Install Rust (minimal)
        shell: bash
        run: |
          rustup set profile minimal
          rustup toolchain install 1.89.0 --profile minimal --target ${{ matrix.target }}
          rustup default 1.89.0

      # ⚡ Cache target/ + registries + workspace crates so Cargo can skip linking when unchanged.
      - name: Setup Rust Cache (target + registries)
        id: rust_cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v4-rust
          shared-key: codex-${{ matrix.target }}-rust-1.89-target
          workspaces: |
            codex-rs -> target
          cache-targets: true
          cache-workspace-crates: true
          cache-all-crates: false
          cache-on-failure: true
          # Optionally reduce post-job save cost if you only care about restores.
          # save-if: ${{ github.ref == 'refs/heads/main' && github.run_attempt == 1 }}

      # Stable sccache namespace per toolchain+target
      - name: Configure sccache cache keys
        shell: bash
        run: echo "SCCACHE_GHA_VERSION=${{ matrix.target }}-rust-1.89-v4" >> "$GITHUB_ENV"

      - name: Setup sccache (GHA backend)
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: v0.10.0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Enable sccache
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
          echo "SCCACHE_IDLE_TIMEOUT=1800" >> "$GITHUB_ENV"
        # sccache+GHA docs: set these envs; the action manages server lifecycle. 
        # (No manual restarts.)   [oai_citation:4‡GitHub](https://github.com/mozilla/sccache/blob/main/docs/GHA.md?utm_source=chatgpt.com)

      # Faster linkers
      - name: Install mold (Linux)
        if: contains(matrix.os, 'ubuntu')
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y mold || true
      - name: Install zld (macOS) – optional speedup
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install michaeleisel/zld/zld || true
          # record path for either Apple Silicon or Intel Homebrew
          if [ -x /opt/homebrew/bin/zld ]; then echo "MAC_ZLD=/opt/homebrew/bin/zld" >> "$GITHUB_ENV"; fi
          if [ -x /usr/local/bin/zld ]; then echo "MAC_ZLD=/usr/local/bin/zld" >> "$GITHUB_ENV"; fi
        # zld can speed macOS linking; has caveats, we fall back automatically if absent.  [oai_citation:5‡GitHub](https://github.com/michaeleisel/zld?utm_source=chatgpt.com) [oai_citation:6‡rustprojectprimer.com](https://rustprojectprimer.com/building/linker.html?utm_source=chatgpt.com)

      # Prefetch deps (git + registry) so --frozen can run offline even with git deps
      - name: Prefetch dependencies (git + registry)
        working-directory: codex-rs
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
        run: cargo fetch --locked

      # Pass chosen npm version (optional build.rs can expose it)
      - name: Export CODE_VERSION for Rust build
        shell: bash
        run: echo "CODE_VERSION=${{ needs.determine-version.outputs.version }}" >> "$GITHUB_ENV"

      # Configure RUSTFLAGS per-OS (trim debug; use fast linker where available; smaller uploads)
      - name: Configure RUSTFLAGS
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "RUSTFLAGS=-Awarnings -C link-arg=-fuse-ld=mold -C debuginfo=0 -C strip=symbols -C panic=abort" >> "$GITHUB_ENV"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ -n "${MAC_ZLD:-}" ]]; then
              echo "RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort -C link-arg=-fuse-ld=${MAC_ZLD}" >> "$GITHUB_ENV"
            else
              echo "RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort" >> "$GITHUB_ENV"
            fi
          else
            echo "RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort" >> "$GITHUB_ENV"
          fi

      - name: Build binaries (with timings)
        shell: bash
        env:
          CARGO_INCREMENTAL: "0"
          RUST_BACKTRACE: "1"
        run: |
          cd codex-rs
          # Reproducible, cache-friendly; --timings emits HTML under target/cargo-timings/
          cargo build --release --frozen --locked --timings --target ${{ matrix.target }} --bin code --bin code-tui --bin code-exec

      - name: sccache stats (human + json)
        shell: bash
        run: |
          sccache --show-stats || true
          sccache --show-stats --stats-format=json || true

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp codex-rs/target/${{ matrix.target }}/release/code.exe artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui.exe artifacts/code-tui-${{ matrix.target }}.exe
            cp codex-rs/target/${{ matrix.target }}/release/code-exec.exe artifacts/code-exec-${{ matrix.target }}.exe
          else
            cp codex-rs/target/${{ matrix.target }}/release/code artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui artifacts/code-tui-${{ matrix.target }}
            cp codex-rs/target/${{ matrix.target }}/release/code-exec artifacts/code-exec-${{ matrix.target }}
          fi

      - name: Upload binaries (no compression)
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/
          compression-level: 0  # maximize upload speed for already-compressed binaries
        # v4 supports tuning compression for much faster uploads.  [oai_citation:7‡GitHub](https://github.com/actions/upload-artifact?utm_source=chatgpt.com)

      - name: Upload cargo timings
        uses: actions/upload-artifact@v4
        with:
          name: cargo-timings-${{ matrix.target }}
          path: codex-rs/target/cargo-timings/*.html
          if-no-files-found: ignore
          compression-level: 0

  release:
    name: Publish to npm
    needs: [determine-version, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          for dir in artifacts/binaries-*; do
            cp "$dir"/* release-assets/
          done
          chmod +x release-assets/* || true
          ls -la release-assets/

      - name: Sync README for npm
        shell: bash
        run: cp README.md codex-cli/README.md

      - name: Update package.json version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          NEW_VERSION="${{ needs.determine-version.outputs.version }}"
          npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          git add package.json
          if git diff --staged --quiet; then
            echo "skip_push=true" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore(release): ${NEW_VERSION} [skip ci]"
            echo "skip_push=false" >> "$GITHUB_OUTPUT"
          fi
          if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            git tag "v${NEW_VERSION}"
          fi
          echo "tag=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Check if we should publish
        id: should_publish
        shell: bash
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        if: steps.should_publish.outputs.publish == 'true'
        working-directory: codex-cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Push tag
        shell: bash
        run: git push origin "v${{ steps.version.outputs.version }}" || true

      - name: Push changes
        if: steps.version.outputs.skip_push != 'true'
        shell: bash
        run: |
          git push origin main
          git push origin --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## @just-every/code v${{ steps.version.outputs.version }}

            Fork of OpenAI Codex with additional features:
            - Enhanced image handling (drag-and-drop, paste, file path detection)
            - /reasoning slash command for dynamic reasoning effort

            ### Installation
            ```bash
            npm install -g @just-every/code
            ```

            ### Usage
            ```bash
            code
            ```
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
