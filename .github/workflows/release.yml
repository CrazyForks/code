name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/test.yml'
      - 'examples/**'
      - '**/*.test.ts'
      - 'test/**'
      - '*.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine next version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @just-every/code version 2>/dev/null || echo "0.0.0")
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ] || [ "$CURRENT_VERSION" \< "$PUBLISHED_VERSION" ]; then
            IFS='.' read -ra V <<< "$PUBLISHED_VERSION"
            NEW_VERSION="${V[0]}.${V[1]}.$((${V[2]} + 1))"
          else
            NEW_VERSION=$CURRENT_VERSION
          fi
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: code-x86_64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: code-aarch64-unknown-linux-musl
          # (GNU variants omitted to reduce asset duplication; npm defaults to musl)
          # macOS builds
          - os: macos-14
            target: x86_64-apple-darwin
            artifact: code-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: code-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: code-x86_64-pc-windows-msvc.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust (minimal)
        shell: bash
        run: |
          rustup set profile minimal
          rustup toolchain install 1.89.0 --profile minimal --target ${{ matrix.target }}
          rustup default 1.89.0

      # Keep target/ across runs so Cargo can no-op when code hasn't changed
      - name: Setup Rust Cache (target + registries)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v5-rust
          shared-key: codex-${{ matrix.target }}-toolchain-1.89
          workspaces: |
            codex-rs -> target
          cache-targets: true
          cache-workspace-crates: true
          cache-on-failure: true

      # sccache: skip compiles when possible (doesn't skip linking)
      - name: Setup sccache (GHA backend)
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: v0.10.0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Enable sccache
        shell: bash
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
          echo "SCCACHE_IDLE_TIMEOUT=1800" >> "$GITHUB_ENV"
          echo "SCCACHE_CACHE_SIZE=10G" >> "$GITHUB_ENV"

      # -------- Platform tuning (minimal, proven) --------

      # Linux GNU: use mold if available; prefer system OpenSSL
      - name: Linux (gnu) tuning
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, 'gnu')
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config mold || true
          if command -v clang >/dev/null 2>&1; then
            echo 'CC=sccache clang'    >> "$GITHUB_ENV"
            echo 'CXX=sccache clang++' >> "$GITHUB_ENV"
          else
            echo 'CC=sccache gcc'      >> "$GITHUB_ENV"
            echo 'CXX=sccache g++'     >> "$GITHUB_ENV"
          fi
          echo 'OPENSSL_NO_VENDOR=1' >> "$GITHUB_ENV"
          echo 'RUSTFLAGS=-Awarnings -C link-arg=-fuse-ld=mold -C debuginfo=0 -C strip=symbols -C panic=abort' >> "$GITHUB_ENV"

      # Linux MUSL: reliable static build via musl-gcc (no glibc symbol leaks)
      - name: Linux (musl) tuning
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, 'musl')
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config
          echo 'CC=musl-gcc' >> "$GITHUB_ENV"
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl) echo 'CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc' >> "$GITHUB_ENV" ;;
            aarch64-unknown-linux-musl) echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc' >> "$GITHUB_ENV" ;;
          esac
          echo 'PKG_CONFIG_ALLOW_CROSS=1' >> "$GITHUB_ENV"
          echo 'OPENSSL_STATIC=1'         >> "$GITHUB_ENV"
          echo 'RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort' >> "$GITHUB_ENV"

      # macOS: stick with Apple toolchain to avoid brew overhead; still cache C via sccache
      - name: macOS tuning
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          echo 'CC=sccache clang'    >> "$GITHUB_ENV"
          echo 'CXX=sccache clang++' >> "$GITHUB_ENV"
          echo 'RUSTFLAGS=-Awarnings -C debuginfo=0 -C strip=symbols -C panic=abort' >> "$GITHUB_ENV"

      # Windows: robust vcpkg with binary caching (x-gha)
      - name: Cache vcpkg data (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~\vcpkg
          key: vcpkg-root-${{ runner.os }}

      - name: Prepare vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $Root = Join-Path $env:USERPROFILE 'vcpkg'
          if (-not (Test-Path $Root)) { New-Item -ItemType Directory -Path $Root | Out-Null }
          if (-not (Test-Path (Join-Path $Root '.git'))) {
            if (Test-Path (Join-Path $Root 'src')) { Remove-Item -Recurse -Force (Join-Path $Root 'src') }
            git clone https://github.com/microsoft/vcpkg $Root
          } else {
            git -C $Root fetch --depth 1 origin
            git -C $Root checkout -q FETCH_HEAD
          }
          if (-not (Test-Path (Join-Path $Root 'vcpkg.exe'))) {
            & (Join-Path $Root 'bootstrap-vcpkg.bat')
          }
          "VCPKG_ROOT=$Root"                    >> $env:GITHUB_ENV
          "VCPKG_DEFAULT_TRIPLET=x64-windows"   >> $env:GITHUB_ENV
          # Enable true binary caching via GitHub Actions cache service
          "VCPKG_FEATURE_FLAGS=manifests,binarycaching" >> $env:GITHUB_ENV
          "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite"  >> $env:GITHUB_ENV

      # Windows: use SChannel (no OpenSSL) + fast linker flags
      - name: Windows TLS backend (SChannel) + linker flags
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Force libgit2 to use the native Windows TLS stack
          "LIBGIT2_SYS_USE_SCHANNEL=1" >> $env:GITHUB_ENV
          # If anything in your graph uses curl-sys, prefer SChannel there too
          "CURL_SSL_BACKEND=schannel"  >> $env:GITHUB_ENV
          # Prefer lld-link if present; otherwise MSVC link with good opts
          if (Get-Command lld-link -ErrorAction SilentlyContinue) {
            "RUSTFLAGS=-Awarnings -Clinker=lld-link -C codegen-units=16 -C debuginfo=0 -C strip=symbols -C panic=abort -C link-arg=/OPT:REF -C link-arg=/OPT:ICF -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          } else {
            "RUSTFLAGS=-Awarnings -C codegen-units=16 -C debuginfo=0 -C strip=symbols -C panic=abort -C link-arg=/OPT:REF -C link-arg=/OPT:ICF -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          }

      # Prefetch deps so --frozen works even with git deps
      - name: Prefetch dependencies (git + registry)
        working-directory: codex-rs
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
        run: cargo fetch --locked

      # Inject the display version without touching Cargo manifests
      - name: Export CODE_VERSION for Rust build
        shell: bash
        run: echo "CODE_VERSION=${{ needs.determine-version.outputs.version }}" >> "$GITHUB_ENV"

      - name: Build binaries (with timings)
        shell: bash
        env:
          CARGO_INCREMENTAL: "0"   # keep off in CI; release builds + sccache
          RUST_BACKTRACE: "1"
        run: |
          cd codex-rs
          cargo build --release --frozen --locked --timings --target ${{ matrix.target }} --bin code --bin code-tui --bin code-exec

      - name: sccache stats
        shell: bash
        run: sccache --show-stats || true

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp codex-rs/target/${{ matrix.target }}/release/code.exe artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui.exe artifacts/code-tui-${{ matrix.target }}.exe
            cp codex-rs/target/${{ matrix.target }}/release/code-exec.exe artifacts/code-exec-${{ matrix.target }}.exe
          else
            cp codex-rs/target/${{ matrix.target }}/release/code artifacts/${{ matrix.artifact }}
            cp codex-rs/target/${{ matrix.target }}/release/code-tui artifacts/code-tui-${{ matrix.target }}
            cp codex-rs/target/${{ matrix.target }}/release/code-exec artifacts/code-exec-${{ matrix.target }}
          fi

      - name: Compress artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Get-ChildItem artifacts -File | ForEach-Object {
            $src = $_.FullName
            $dst = "$src.zip"
            Compress-Archive -Path $src -DestinationPath $dst -Force
            Remove-Item $src -Force
          }

      - name: Compress artifacts (Linux dual-format)
        if: contains(matrix.os, 'ubuntu')
        shell: bash
        run: |
          for f in artifacts/*; do
            base=$(basename "$f")
            # .zst (size-optimized)
            zstd -T0 -19 --force -o "artifacts/${base}.zst" "$f"
            # .tar.gz fallback for users without zstd
            tar -C artifacts -czf "artifacts/${base}.tar.gz" "$base"
            rm -f "$f"
          done

      - name: Compress artifacts (macOS dual-format)
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          for f in artifacts/*; do
            base=$(basename "$f")
            # .zst (size-optimized)
            zstd -T0 -19 --force -o "artifacts/${base}.zst" "$f"
            # .tar.gz fallback for users without zstd
            tar -C artifacts -czf "artifacts/${base}.tar.gz" "$base"
            rm -f "$f"
          done

      - name: Upload binaries (compressed)
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/
          compression-level: 0

      - name: Upload cargo timings
        uses: actions/upload-artifact@v4
        with:
          name: cargo-timings-${{ matrix.target }}
          path: codex-rs/target/cargo-timings/*.html
          if-no-files-found: ignore
          compression-level: 0

  release:
    name: Publish to npm
    needs: [determine-version, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          for dir in artifacts/binaries-*; do
            cp "$dir"/* release-assets/
          done
          chmod +x release-assets/* || true
          ls -la release-assets/

      - name: Sync README for npm
        shell: bash
        run: cp README.md codex-cli/README.md

      - name: Update package.json version
        id: version
        working-directory: codex-cli
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          NEW_VERSION="${{ needs.determine-version.outputs.version }}"
          npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          git add package.json
          if git diff --staged --quiet; then
            echo "skip_push=true" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore(release): ${NEW_VERSION} [skip ci]"
            echo "skip_push=false" >> "$GITHUB_OUTPUT"
          fi
          if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            git tag "v${NEW_VERSION}"
          fi
          echo "tag=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Check if we should publish
        id: should_publish
        shell: bash
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        if: steps.should_publish.outputs.publish == 'true'
        working-directory: codex-cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Push tag
        shell: bash
        run: git push origin "v${{ steps.version.outputs.version }}" || true

      - name: Push changes
        if: steps.version.outputs.skip_push != 'true'
        shell: bash
        run: |
          git push origin main
          git push origin --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## @just-every/code v${{ steps.version.outputs.version }}

            Fork of OpenAI Codex with additional features:
            - Enhanced image handling (drag-and-drop, paste, file path detection)
            - /reasoning slash command for dynamic reasoning effort

            ### Installation
            ```bash
            npm install -g @just-every/code
            ```

            ### Usage
            ```bash
            code
            ```
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
