name: Release

on:
  push:
    branches: [ coder-release ]
    paths-ignore:
      - '.github/workflows/test.yml'
      - 'examples/**'
      - '**/*.test.ts'
      - 'test/**'
      - '*.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            artifact: coder-x86_64-unknown-linux-musl
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact: coder-x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            artifact: coder-aarch64-unknown-linux-musl
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: coder-aarch64-unknown-linux-gnu
          # macOS builds
          - os: macos-14  # ARM Mac for both targets
            target: x86_64-apple-darwin
            artifact: coder-x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: coder-aarch64-apple-darwin
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: coder-x86_64-pc-windows-msvc.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.88
      with:
        targets: ${{ matrix.target }}
        
    - name: Install musl tools (Linux)
      if: contains(matrix.target, 'musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools pkg-config
        
    - name: Build binaries
      run: |
        cd codex-rs
        cargo build --release --target ${{ matrix.target }} --bin coder --bin coder-tui --bin coder-exec
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp codex-rs/target/${{ matrix.target }}/release/coder.exe artifacts/${{ matrix.artifact }}
          cp codex-rs/target/${{ matrix.target }}/release/coder-tui.exe artifacts/coder-tui-${{ matrix.target }}.exe
          cp codex-rs/target/${{ matrix.target }}/release/coder-exec.exe artifacts/coder-exec-${{ matrix.target }}.exe
        else
          cp codex-rs/target/${{ matrix.target }}/release/coder artifacts/${{ matrix.artifact }}
          cp codex-rs/target/${{ matrix.target }}/release/coder-tui artifacts/coder-tui-${{ matrix.target }}
          cp codex-rs/target/${{ matrix.target }}/release/coder-exec artifacts/coder-exec-${{ matrix.target }}
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.target }}
        path: artifacts/

  release:
    name: Publish to npm
    needs: build-binaries
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Skip if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release assets
      run: |
        # Create a directory for all release assets
        mkdir -p release-assets
        
        # Copy all binaries to release-assets for GitHub Release
        for dir in artifacts/binaries-*; do
          cp $dir/* release-assets/
        done
        
        # Make binaries executable
        chmod +x release-assets/*
        
        # List assets for verification
        ls -la release-assets/
        
    - name: Bump version
      id: version
      working-directory: codex-cli
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version in package.json: $CURRENT_VERSION"
        
        # Check latest published version
        PUBLISHED_VERSION=$(npm view @just-every/coder version 2>/dev/null || echo "0.0.0")
        echo "Latest published version: $PUBLISHED_VERSION"
        
        # Compare versions and bump appropriately
        if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ] || [ "$CURRENT_VERSION" \< "$PUBLISHED_VERSION" ]; then
          # Need to bump from published version
          echo "Bumping from published version $PUBLISHED_VERSION"
          # Set to published version first, then bump
          npm version $PUBLISHED_VERSION --no-git-tag-version --allow-same-version
          npm version patch --no-git-tag-version
        else
          echo "Current version $CURRENT_VERSION is already ahead of published $PUBLISHED_VERSION"
        fi
        
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        
        # Commit changes
        git add package.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "skip_push=true" >> $GITHUB_OUTPUT
        else
          git commit -m "chore(release): ${NEW_VERSION} [skip ci]"
          # Only create tag if it doesn't exist
          if ! git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            git tag "v${NEW_VERSION}"
          else
            echo "Tag v${NEW_VERSION} already exists, skipping tag creation"
          fi
          echo "skip_push=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Check if we should publish
      id: should_publish
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "NPM_TOKEN not set, skipping publish"
          echo "publish=false" >> $GITHUB_OUTPUT
        else
          echo "NPM_TOKEN is set, will publish"
          echo "publish=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to npm
      working-directory: codex-cli
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      if: steps.should_publish.outputs.publish == 'true'
        
    - name: Push changes
      run: |
        git push origin coder-release
        git push origin --tags
      if: steps.version.outputs.skip_push != 'true'
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: steps.version.outputs.skip_push != 'true'
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## @just-every/coder v${{ steps.version.outputs.version }}
          
          Fork of OpenAI Codex with additional features:
          - Enhanced image handling (drag-and-drop, paste, file path detection)
          - /reasoning slash command for dynamic reasoning effort
          
          ### Installation
          ```bash
          npm install -g @just-every/coder
          ```
          
          ### Usage
          ```bash
          coder
          ```
        files: |
          release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}