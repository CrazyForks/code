name: PR Cleanup

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (report only)'
        required: false
        default: 'false'
      patterns:
        description: 'Comma-separated glob patterns to remove'
        required: false
        default: '.cargo-home/**,.cargo-cache/**,**/.gitignore'
  push:
    paths:
      - .github/pr-cleanup.trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: List open PRs (json)
        id: list
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const owner = context.repo.owner; const repo = context.repo.repo;
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 });
            const data = prs.map(p => ({
              number: p.number,
              title: p.title,
              head: p.head.ref,
              head_repo: p.head.repo?.full_name || '',
              same_repo: (p.head.repo?.full_name || '') === `${owner}/${repo}`,
              author: p.user?.login || '',
              created_at: p.created_at,
              body: p.body || ''
            }));
            return JSON.stringify(data);

      - name: Clean PR branches
        env:
          DRY_RUN: ${{ inputs.dry_run }}
          PATTERNS: ${{ inputs.patterns }}
          GH_TOKEN: ${{ secrets.CODE_GH_PAT || github.token }}
        run: |
          set -euo pipefail
          echo '${{ steps.list.outputs.result }}' > .github/auto/prs.json
          OWNER=${GITHUB_REPOSITORY%%/*}
          REPO=${GITHUB_REPOSITORY##*/}
          remove_patterns() {
            IFS=',' read -r -a pats <<<"$PATTERNS"
            for p in "${pats[@]}"; do
              case "$p" in
                **/.gitignore) mapfile -t files < <(git ls-files --others --cached --exclude-standard | grep -E '\\.gitignore$' || true);;
                .cargo-home/**) files=( $(git ls-files -z | tr '\0' '\n' | grep '^.cargo-home/' || true) );;
                .cargo-cache/**) files=( $(git ls-files -z | tr '\0' '\n' | grep '^.cargo-cache/' || true) );;
                *) files=() ;;
              esac
              if [ ${#files[@]} -gt 0 ]; then
                git rm -r --cached --ignore-unmatch -- "${files[@]}" || true
              fi
            done
            if ! grep -q '^/.cargo-home/' .gitignore 2>/dev/null; then echo '/.cargo-home/' >> .gitignore ; fi
            if ! grep -q '^/.cargo-cache/' .gitignore 2>/dev/null; then echo '/.cargo-cache/' >> .gitignore ; fi
            git add .gitignore || true
          }

          changed=false
          jq -c '.[]' .github/auto/prs.json | while read -r pr; do
            num=$(jq -r '.number' <<<"$pr")
            head=$(jq -r '.head' <<<"$pr")
            same_repo=$(jq -r '.same_repo' <<<"$pr")
            author=$(jq -r '.author' <<<"$pr")
            echo "-- PR #$num head=$head author=$author"
            if [ "$same_repo" != "true" ]; then
              echo "  skip: fork PR (cannot push)"; continue
            fi
            files=$(curl -sSL -H "authorization: Bearer $GH_TOKEN" -H 'accept: application/vnd.github+json' \
              "https://api.github.com/repos/$OWNER/$REPO/pulls/$num/files?per_page=100")
            needs_cleanup=$(jq -r --arg pats "$PATTERNS" '
              ($pats | split(",")) as $globs | any(.[]; .filename as $f | any($globs[]; $f | test((. | gsub("\\*\\*"; ".*" ) | gsub("\\*"; "[^"]*" )); "")))
            ' <<<"$files")
            if [ "$needs_cleanup" != "true" ]; then echo "  no cleanup needed"; continue; fi
            git fetch origin "$head" && git checkout -B "$head" "origin/$head"
            remove_patterns
            if git diff --cached --quiet; then
              echo "  nothing staged to clean"; continue
            fi
            if [ "${DRY_RUN}" = "true" ]; then
              echo "  DRY RUN: would commit cleanup on $head"; git reset --hard; git checkout -; continue
            fi
            git -c user.email="github-actions[bot]@users.noreply.github.com" -c user.name="github-actions[bot]" \
              commit -m "chore(cleanup): remove local caches and stray .gitignore; add ignores"
            git push origin "$head"
            git checkout -
            changed=true
          done
          echo "changed=$changed" >> $GITHUB_OUTPUT

      - name: Close duplicate bot PRs
        if: inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prs = JSON.parse(process.env.PRS);
            const byIssue = new Map();
            const bot = new Set(['just-every-code','github-actions','github-actions[bot]']);
            for (const p of prs) {
              const m = p.head.match(/^issue-(\d+)-/);
              if (!m) continue;
              const key = m[1];
              if (!byIssue.has(key)) byIssue.set(key, []);
              byIssue.get(key).push(p);
            }
            for (const [iss, arr] of byIssue) {
              const bots = arr.filter(p => bot.has(p.author));
              if (bots.length <= 1) continue;
              bots.sort((a,b) => new Date(b.created_at) - new Date(a.created_at));
              const keep = bots[0];
              for (const pr of bots.slice(1)) {
                await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number, body: `Closing in favor of #${keep.number} (newer duplicate).` });
                await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, state: 'closed' });
              }
            }
        env:
          PRS: ${{ steps.list.outputs.result }}
